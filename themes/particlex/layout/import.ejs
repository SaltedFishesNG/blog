<link rel="stylesheet" href="/css/main.css" />
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@500;600;700&amp;family=Lexend:wght@500;600;700&amp;family=Noto+Sans+SC:wght@600;700&amp;display=swap" media="">
<link rel="preconnect" href="https://cdn.staticfile.org" />
<script src="https://cdn.staticfile.org/vue/3.3.7/vue.global.prod.min.js"></script>
<link rel="stylesheet" href="https://cdn.staticfile.org/font-awesome/6.4.2/css/all.min.css">
<script> const mixins = {}; </script>

<% if (theme.polyfill.enable) { %>
<script src="https://polyfill.io/v3/polyfill.min.js?features=<%- theme.polyfill.features %>"></script>
<% } %>

<% if (theme.math.enable && page.math) { %>
<script src="https://cdn.staticfile.org/KaTeX/0.16.9/katex.min.js"></script>
<script src="https://cdn.staticfile.org/KaTeX/0.16.9/contrib/auto-render.min.js"></script>
<link rel="stylesheet" href="https://cdn.staticfile.org/KaTeX/0.16.9/katex.min.css" />
<script>
mixins.math = {
    created() {
        this.renderers.push(this.math);
    },
    methods: {
        math() {
            renderMathInElement(document.body, {
                delimiters: [
                    { left: "$$", right: "$$", display: true },
                    { left: "$", right: "$", display: false },
                    { left: "\\(", right: "\\)", display: false },
                    { left: "\\[", right: "\\]", display: true },
                ],
            });
        },
    },
};
</script>
<% } %>

<% if (theme.preview.enable) { %>
<script>
mixins.preview = {
    data() {
        return { previewShow: false };
    },
    created() {
        this.renderers.push(this.preview);
    },
    methods: {
        preview() {
            let preview = this.$refs.preview,
                content = this.$refs.previewContent;
            let images = document.querySelectorAll("img");
            for (let i of images)
                i.addEventListener("click", () => {
                    content.alt = i.alt;
                    content.src = i.src;
                    this.previewShow = true;
                });
            preview.addEventListener("click", () => {
                this.previewShow = false;
            });
            window.addEventListener("resize", () => {
                this.previewShow = false;
            });
        },
    },
};
</script>
<% } %>

<% if (theme.crypto.enable && typeof page.secret !== "undefined") { %>
<script src="https://cdn.staticfile.org/crypto-js/4.2.0/crypto-js.min.js"></script>
<script>
mixins.crypto = {
    data() {
        return { crypto: "", cryptoStatus: "" };
    },
    watch: {
        crypto(value) {
            let input = this.$refs.crypto,
                content = this.$refs.content;
            let { encrypted, shasum } = input.dataset;
            try {
                let decrypted = CryptoJS.AES.decrypt(encrypted, value).toString(CryptoJS.enc.Utf8);
                if (CryptoJS.SHA256(decrypted).toString() === shasum) {
                    this.cryptoStatus = "success";
                    content.innerHTML = decrypted;
                    this.render();
                } else this.cryptoStatus = "failure";
            } catch {
                this.cryptoStatus = "failure";
            }
        },
    },
};
</script>
<% } %>

<% if (type === "archives" && theme.search.enable) { %>
<script>
mixins.search = {
    data() {
        return { rawSearch: "" };
    },
    watch: {
        search(value) {
            let timeline = this.$refs.timeline.childNodes;
            for (let i of timeline)
                if (!value || i.dataset.title.includes(value)) {
                    i.style.opacity = 1;
                    i.style.visibility = "visible";
                    i.style.marginTop = 0;
                } else {
                    i.style.opacity = 0;
                    i.style.visibility = "hidden";
                    i.style.marginTop = -i.offsetHeight - 30 + "px";
                }
        },
    },
    computed: {
        search() {
            return this.rawSearch.toLowerCase().replace(/\s+/g, "");
        },
    },
};
</script>
<% } %>

<% if (type === "post" && page.comments) { %>
    <% if (theme.gitalk.enable) { %>
        <script src="https://cdn.staticfile.org/gitalk/1.8.0/gitalk.min.js"></script>
        <link rel="stylesheet" href="https://cdn.staticfile.org/gitalk/1.8.0/gitalk.min.css" />
    <% } %>
    <% if (theme.waline.enable) { %>
        <script src="https://cdn.staticfile.org/waline/2.15.8/waline.min.js"></script>
        <link rel="stylesheet" href="https://cdn.staticfile.org/waline/2.15.8/waline.min.css" />
        <link rel="stylesheet" href="https://cdn.staticfile.org/waline/2.15.8/waline-meta.min.css" />
    <% } %>
    <% if (theme.twikoo.enable) { %>
        <script src="https://cdn.staticfile.org/twikoo/1.6.22/twikoo.all.min.js"></script>
    <% } %>
<% } %>

<% if (type === "index") { %>
<script>
mixins.home = {
    mounted() {
        let background = this.$refs.homeBackground;
        let images = background.dataset.images.split(",");
        let id = Math.floor(Math.random() * images.length);
        background.style.backgroundImage = `url('${images[id]}')`;
        this.menuColor = true;
    },
    methods: {
        homeClick() {
            window.scrollTo({ top: window.innerHeight, behavior: "smooth" });
        },
    },
};
</script>
<% } %>

<% if (theme.highlight.enable && page.highlight) { %>
<script src="https://cdn.staticfile.org/highlight.js/11.9.0/highlight.min.js"></script>
<script src="https://cdn.staticfile.org/highlightjs-line-numbers.js/2.8.0/highlightjs-line-numbers.min.js"></script>
<link rel="stylesheet" href="https://cdn.staticfile.org/highlight.js/11.9.0/styles/<%- theme.highlight.style %>.min.css"/>
<script>
mixins.highlight = {
    data() {
        return { copying: false };
    },
    created() {
        hljs.configure({ ignoreUnescapedHTML: true });
        this.renderers.push(this.highlight);
    },
    methods: {
        sleep(delay) {
            return new Promise(resolve => setTimeout(resolve, delay));
        },
        highlight() {
            let codes = document.querySelectorAll("pre");
            for (let i of codes) {
                let code = i.textContent;
                let language = [...i.classList, ...i.firstChild.classList][0] || "plaintext";
                let highlighted;
                try {
                    highlighted = hljs.highlight(code, { language }).value;
                } catch {
                    highlighted = code;
                }
                i.innerHTML = `
                    <div class="code-content hljs">${highlighted}</div>
                    <div class="language">${language}</div>
                    <div class="copycode">
                        <i class="fa-solid fa-copy fa-fw"></i>
                        <i class="fa-solid fa-check fa-fw"></i>
                    </div>
                `;
                let content = i.querySelector(".code-content");
                hljs.lineNumbersBlock(content, { singleLine: true });
                let copycode = i.querySelector(".copycode");
                copycode.addEventListener("click", async () => {
                    if (this.copying) return;
                    this.copying = true;
                    copycode.classList.add("copied");
                    await navigator.clipboard.writeText(code);
                    await this.sleep(1000);
                    copycode.classList.remove("copied");
                    this.copying = false;
                });
            }
        },
    },
};
</script>
<% } %>